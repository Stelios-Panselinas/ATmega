
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00802800  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00802808  00802808  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003138  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022ce  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00005a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00006010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016e0  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002eb  00000000  00000000  00007844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007b2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_12>
  34:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_23>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e8 ea       	ldi	r30, 0xA8	; 168
  a4:	f4 e0       	ldi	r31, 0x04	; 4
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  c6:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <period_of_1ms>:
bool period_of_1ms_have_passed = 0;
bool period_of_2ms_have_passed = 0;
bool have_finished = 0;

void period_of_1ms(){
	period_of_1ms_have_passed = 0;
  ce:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <period_of_1ms_have_passed>
	TCA0.SINGLE.CNT = 0; //clear counter
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	fa e0       	ldi	r31, 0x0A	; 10
  d6:	10 a2       	std	Z+32, r1	; 0x20
  d8:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLB = 0; //Normal Mode (TCA_SINGLE_WGMODE_NORMAL_gc уел 207)
  da:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.CMP0 = T1;//When CMP0 reaches this value -> interrupt
  dc:	84 e1       	ldi	r24, 0x14	; 20
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	80 a7       	std	Z+40, r24	; 0x28
  e2:	91 a7       	std	Z+41, r25	; 0x29
	//CLOCK_FREQUENCY/1024
	TCA0.SINGLE.CTRLA = 0x7<<1; //TCA_SINGLE_CLKSEL_DIV1024_gc уел 224
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= 1; //Enable
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm; //Interrupt Enable (=0x10)
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	82 87       	std	Z+10, r24	; 0x0a
	sei();
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <period_of_2ms>:
}

void period_of_2ms(){
	period_of_2ms_have_passed = 0;
  f6:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <period_of_2ms_have_passed>
	TCB0.CCMP = T2;
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	84 87       	std	Z+12, r24	; 0x0c
 104:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.CTRLA = TCB_CLKSEL_CLKTCA_gc | TCB_ENABLE_bm;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 83       	st	Z, r24
	TCB0.CNT = 0;
 10a:	12 86       	std	Z+10, r1	; 0x0a
 10c:	13 86       	std	Z+11, r1	; 0x0b
	TCB0.CTRLB = 0;
 10e:	11 82       	std	Z+1, r1	; 0x01
	TCB0.CTRLB = TCB_CCMPEN_bm;
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	81 83       	std	Z+1, r24	; 0x01
	TCB0.INTCTRL = TCB_CAPT_bm;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	85 83       	std	Z+5, r24	; 0x05
	sei();
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <adc_setup>:
}

void adc_setup(){
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;//10-bit resolution
 11c:	e0 e0       	ldi	r30, 0x00	; 0
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	80 81       	ld	r24, Z
 122:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;//The bit
 12a:	86 81       	ldd	r24, Z+6	; 0x06
 12c:	87 60       	ori	r24, 0x07	; 7
 12e:	86 83       	std	Z+6, r24	; 0x06
	ADC0.DBGCTRL |= ADC_DBGRUN_bm; //Enable Debug Mode
 130:	84 85       	ldd	r24, Z+12	; 0x0c
 132:	81 60       	ori	r24, 0x01	; 1
 134:	84 87       	std	Z+12, r24	; 0x0c
	//Window Comparator Mode
	ADC0.WINLT |= 10; //Set threshold
 136:	82 89       	ldd	r24, Z+18	; 0x12
 138:	93 89       	ldd	r25, Z+19	; 0x13
 13a:	8a 60       	ori	r24, 0x0A	; 10
 13c:	82 8b       	std	Z+18, r24	; 0x12
 13e:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
 140:	82 85       	ldd	r24, Z+10	; 0x0a
 142:	82 60       	ori	r24, 0x02	; 2
 144:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT < WINLT
 146:	84 81       	ldd	r24, Z+4	; 0x04
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	84 83       	std	Z+4, r24	; 0x04
	sei();
 14c:	78 94       	sei
	ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 14e:	80 85       	ldd	r24, Z+8	; 0x08
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 87       	std	Z+8, r24	; 0x08
 154:	08 95       	ret

00000156 <main>:
}

int main(){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	//LED's direction initialize
	PORTD.DIR |= PIN0_bm; //PIN is output
 15a:	c0 e6       	ldi	r28, 0x60	; 96
 15c:	d4 e0       	ldi	r29, 0x04	; 4
 15e:	88 81       	ld	r24, Y
 160:	81 60       	ori	r24, 0x01	; 1
 162:	88 83       	st	Y, r24
	PORTD.DIR |= PIN1_bm; //PIN is output
 164:	88 81       	ld	r24, Y
 166:	82 60       	ori	r24, 0x02	; 2
 168:	88 83       	st	Y, r24
	PORTD.DIR |= PIN2_bm; //PIN is output
 16a:	88 81       	ld	r24, Y
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	88 83       	st	Y, r24
	
	adc_setup();
 170:	0e 94 8e 00 	call	0x11c	; 0x11c <adc_setup>
	PORTD.OUTCLR= moving_forward;
 174:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <moving_forward>
 178:	8e 83       	std	Y+6, r24	; 0x06
	
	while(!have_finished){
 17a:	58 c0       	rjmp	.+176    	; 0x22c <main+0xd6>
		if(left_turns == 5){
 17c:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <left_turns>
 180:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <left_turns+0x1>
 184:	05 97       	sbiw	r24, 0x05	; 5
 186:	19 f4       	brne	.+6      	; 0x18e <main+0x38>
			have_finished = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <__data_end>
		}
		period_of_1ms();
 18e:	0e 94 67 00 	call	0xce	; 0xce <period_of_1ms>
		//Searching for front wall
		if(period_of_1ms_have_passed){
 192:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <period_of_1ms_have_passed>
 196:	88 23       	and	r24, r24
 198:	a1 f0       	breq	.+40     	; 0x1c2 <main+0x6c>
			ADC0.WINLT |= 10; //Set threshold
 19a:	e0 e0       	ldi	r30, 0x00	; 0
 19c:	f6 e0       	ldi	r31, 0x06	; 6
 19e:	82 89       	ldd	r24, Z+18	; 0x12
 1a0:	93 89       	ldd	r25, Z+19	; 0x13
 1a2:	8a 60       	ori	r24, 0x0A	; 10
 1a4:	82 8b       	std	Z+18, r24	; 0x12
 1a6:	93 8b       	std	Z+19, r25	; 0x13
			ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
 1a8:	82 85       	ldd	r24, Z+10	; 0x0a
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	82 87       	std	Z+10, r24	; 0x0a
			ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT < WINLT
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	84 83       	std	Z+4, r24	; 0x04
			ADC0.CTRLA |= ADC_FREERUN_bm; //Free-Running mode enabled
 1b4:	80 81       	ld	r24, Z
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	80 83       	st	Z, r24
			ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 1ba:	80 85       	ldd	r24, Z+8	; 0x08
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	80 87       	std	Z+8, r24	; 0x08
			sei();
 1c0:	78 94       	sei
		}
		period_of_2ms();
 1c2:	0e 94 7b 00 	call	0xf6	; 0xf6 <period_of_2ms>
		//Searching for right wall
		if(period_of_2ms_have_passed){
 1c6:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <period_of_2ms_have_passed>
 1ca:	88 23       	and	r24, r24
 1cc:	a1 f0       	breq	.+40     	; 0x1f6 <main+0xa0>
			ADC0.WINHT |= 10; //Set threshold
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	f6 e0       	ldi	r31, 0x06	; 6
 1d2:	84 89       	ldd	r24, Z+20	; 0x14
 1d4:	95 89       	ldd	r25, Z+21	; 0x15
 1d6:	8a 60       	ori	r24, 0x0A	; 10
 1d8:	84 8b       	std	Z+20, r24	; 0x14
 1da:	95 8b       	std	Z+21, r25	; 0x15
			ADC0.INTCTRL |= ADC_WCMP_bm; //Enable Interrupts for WCM
 1dc:	82 85       	ldd	r24, Z+10	; 0x0a
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	82 87       	std	Z+10, r24	; 0x0a
			ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt when RESULT > WINLT
 1e2:	84 81       	ldd	r24, Z+4	; 0x04
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	84 83       	std	Z+4, r24	; 0x04
			ADC0.CTRLA &= ~(1 << 1); //Disable Free-Running mode
 1e8:	80 81       	ld	r24, Z
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	80 83       	st	Z, r24
			ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 1ee:	80 85       	ldd	r24, Z+8	; 0x08
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 87       	std	Z+8, r24	; 0x08
			sei();
 1f4:	78 94       	sei
		}
		PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 1f6:	e0 ea       	ldi	r30, 0xA0	; 160
 1f8:	f4 e0       	ldi	r31, 0x04	; 4
 1fa:	85 89       	ldd	r24, Z+21	; 0x15
 1fc:	89 60       	ori	r24, 0x09	; 9
 1fe:	85 8b       	std	Z+21, r24	; 0x15
		sei(); //enable interrupts
 200:	78 94       	sei
		while(turn_180){
 202:	10 c0       	rjmp	.+32     	; 0x224 <main+0xce>
			TCB1.CCMP = T3;
 204:	e0 e9       	ldi	r30, 0x90	; 144
 206:	fa e0       	ldi	r31, 0x0A	; 10
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	84 87       	std	Z+12, r24	; 0x0c
 20e:	95 87       	std	Z+13, r25	; 0x0d
			TCB1.CTRLA = TCB_CLKSEL_CLKTCA_gc | TCB_ENABLE_bm;
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	80 83       	st	Z, r24
			TCB1.CNT = 0;
 214:	12 86       	std	Z+10, r1	; 0x0a
 216:	13 86       	std	Z+11, r1	; 0x0b
			TCB1.CTRLB = 0;
 218:	11 82       	std	Z+1, r1	; 0x01
			TCB1.CTRLB = TCB_CCMPEN_bm;
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	81 83       	std	Z+1, r24	; 0x01
			TCB1.INTCTRL = TCB_CAPT_bm;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	85 83       	std	Z+5, r24	; 0x05
			sei();
 222:	78 94       	sei
			ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
			sei();
		}
		PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
		sei(); //enable interrupts
		while(turn_180){
 224:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <turn_180>
 228:	81 11       	cpse	r24, r1
 22a:	ec cf       	rjmp	.-40     	; 0x204 <main+0xae>
	PORTD.DIR |= PIN2_bm; //PIN is output
	
	adc_setup();
	PORTD.OUTCLR= moving_forward;
	
	while(!have_finished){
 22c:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <__data_end>
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <main+0xe0>
 234:	a3 cf       	rjmp	.-186    	; 0x17c <main+0x26>
			TCB1.CTRLB = TCB_CCMPEN_bm;
			TCB1.INTCTRL = TCB_CAPT_bm;
			sei();
		}
	}
}
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <__vector_23>:


//sensors input
ISR(ADC0_WCOMP_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if (!moving_bakwards && period_of_2ms_have_passed){
 256:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <moving_bakwards>
 25a:	81 11       	cpse	r24, r1
 25c:	25 c0       	rjmp	.+74     	; 0x2a8 <__vector_23+0x68>
 25e:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <period_of_2ms_have_passed>
 262:	99 23       	and	r25, r25
 264:	09 f1       	breq	.+66     	; 0x2a8 <__vector_23+0x68>
		PORTD.OUT |= stop; // all led off
 266:	e0 e6       	ldi	r30, 0x60	; 96
 268:	f4 e0       	ldi	r31, 0x04	; 4
 26a:	94 81       	ldd	r25, Z+4	; 0x04
 26c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 270:	98 2b       	or	r25, r24
 272:	94 83       	std	Z+4, r25	; 0x04
		int intflags = ADC0.INTFLAGS;
 274:	a0 e0       	ldi	r26, 0x00	; 0
 276:	b6 e0       	ldi	r27, 0x06	; 6
 278:	1b 96       	adiw	r26, 0x0b	; 11
 27a:	9c 91       	ld	r25, X
 27c:	1b 97       	sbiw	r26, 0x0b	; 11
		ADC0.INTFLAGS = intflags;
 27e:	1b 96       	adiw	r26, 0x0b	; 11
 280:	9c 93       	st	X, r25
		PORTD.OUTCLR= turning_right; //LED0 is on
 282:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <turning_right>
 286:	96 83       	std	Z+6, r25	; 0x06
		PORTD.OUT |= stop; //all leds off
 288:	94 81       	ldd	r25, Z+4	; 0x04
 28a:	89 2b       	or	r24, r25
 28c:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR= moving_forward; //LED1 is on
 28e:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <moving_forward>
 292:	86 83       	std	Z+6, r24	; 0x06
		left_turns--;
 294:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <left_turns>
 298:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <left_turns+0x1>
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <left_turns>
 2a2:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <left_turns+0x1>
}


//sensors input
ISR(ADC0_WCOMP_vect){
	if (!moving_bakwards && period_of_2ms_have_passed){
 2a6:	74 c0       	rjmp	.+232    	; 0x390 <__vector_23+0x150>
		ADC0.INTFLAGS = intflags;
		PORTD.OUTCLR= turning_right; //LED0 is on
		PORTD.OUT |= stop; //all leds off
		PORTD.OUTCLR= moving_forward; //LED1 is on
		left_turns--;
	}else if(!moving_bakwards && period_of_1ms_have_passed){
 2a8:	81 11       	cpse	r24, r1
 2aa:	25 c0       	rjmp	.+74     	; 0x2f6 <__vector_23+0xb6>
 2ac:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <period_of_1ms_have_passed>
 2b0:	99 23       	and	r25, r25
 2b2:	09 f1       	breq	.+66     	; 0x2f6 <__vector_23+0xb6>
		PORTD.OUT |= stop; // all led off
 2b4:	e0 e6       	ldi	r30, 0x60	; 96
 2b6:	f4 e0       	ldi	r31, 0x04	; 4
 2b8:	94 81       	ldd	r25, Z+4	; 0x04
 2ba:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2be:	98 2b       	or	r25, r24
 2c0:	94 83       	std	Z+4, r25	; 0x04
		int intflags = ADC0.INTFLAGS;
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b6 e0       	ldi	r27, 0x06	; 6
 2c6:	1b 96       	adiw	r26, 0x0b	; 11
 2c8:	9c 91       	ld	r25, X
 2ca:	1b 97       	sbiw	r26, 0x0b	; 11
		ADC0.INTFLAGS = intflags;
 2cc:	1b 96       	adiw	r26, 0x0b	; 11
 2ce:	9c 93       	st	X, r25
		PORTD.OUTCLR= turning_left; //LED2 is on
 2d0:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <turning_left>
 2d4:	96 83       	std	Z+6, r25	; 0x06
		PORTD.OUT |= stop; //all leds off
 2d6:	94 81       	ldd	r25, Z+4	; 0x04
 2d8:	89 2b       	or	r24, r25
 2da:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR= moving_forward; //LED1 is on
 2dc:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <moving_forward>
 2e0:	86 83       	std	Z+6, r24	; 0x06
		left_turns++;
 2e2:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <left_turns>
 2e6:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <left_turns+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <left_turns>
 2f0:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <left_turns+0x1>
		ADC0.INTFLAGS = intflags;
		PORTD.OUTCLR= turning_right; //LED0 is on
		PORTD.OUT |= stop; //all leds off
		PORTD.OUTCLR= moving_forward; //LED1 is on
		left_turns--;
	}else if(!moving_bakwards && period_of_1ms_have_passed){
 2f4:	4d c0       	rjmp	.+154    	; 0x390 <__vector_23+0x150>
		ADC0.INTFLAGS = intflags;
		PORTD.OUTCLR= turning_left; //LED2 is on
		PORTD.OUT |= stop; //all leds off
		PORTD.OUTCLR= moving_forward; //LED1 is on
		left_turns++;
	}else if(moving_bakwards && period_of_1ms_have_passed){
 2f6:	88 23       	and	r24, r24
 2f8:	29 f1       	breq	.+74     	; 0x344 <__vector_23+0x104>
 2fa:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <period_of_1ms_have_passed>
 2fe:	99 23       	and	r25, r25
 300:	09 f1       	breq	.+66     	; 0x344 <__vector_23+0x104>
		PORTD.OUT |= stop; // all led off
 302:	e0 e6       	ldi	r30, 0x60	; 96
 304:	f4 e0       	ldi	r31, 0x04	; 4
 306:	94 81       	ldd	r25, Z+4	; 0x04
 308:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 30c:	98 2b       	or	r25, r24
 30e:	94 83       	std	Z+4, r25	; 0x04
		int intflags = ADC0.INTFLAGS;
 310:	a0 e0       	ldi	r26, 0x00	; 0
 312:	b6 e0       	ldi	r27, 0x06	; 6
 314:	1b 96       	adiw	r26, 0x0b	; 11
 316:	9c 91       	ld	r25, X
 318:	1b 97       	sbiw	r26, 0x0b	; 11
		ADC0.INTFLAGS = intflags;
 31a:	1b 96       	adiw	r26, 0x0b	; 11
 31c:	9c 93       	st	X, r25
		PORTD.OUTCLR= turning_right; //LED0 is on
 31e:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <turning_right>
 322:	96 83       	std	Z+6, r25	; 0x06
		PORTD.OUT |= stop; //all leds off
 324:	94 81       	ldd	r25, Z+4	; 0x04
 326:	89 2b       	or	r24, r25
 328:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR= moving_forward; //LED1 is on
 32a:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <moving_forward>
 32e:	86 83       	std	Z+6, r24	; 0x06
		left_turns--;
 330:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <left_turns>
 334:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <left_turns+0x1>
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <left_turns>
 33e:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <left_turns+0x1>
		ADC0.INTFLAGS = intflags;
		PORTD.OUTCLR= turning_left; //LED2 is on
		PORTD.OUT |= stop; //all leds off
		PORTD.OUTCLR= moving_forward; //LED1 is on
		left_turns++;
	}else if(moving_bakwards && period_of_1ms_have_passed){
 342:	26 c0       	rjmp	.+76     	; 0x390 <__vector_23+0x150>
		ADC0.INTFLAGS = intflags;
		PORTD.OUTCLR= turning_right; //LED0 is on
		PORTD.OUT |= stop; //all leds off
		PORTD.OUTCLR= moving_forward; //LED1 is on
		left_turns--;
	}else if(moving_bakwards && period_of_2ms_have_passed){
 344:	88 23       	and	r24, r24
 346:	21 f1       	breq	.+72     	; 0x390 <__vector_23+0x150>
 348:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <period_of_2ms_have_passed>
 34c:	88 23       	and	r24, r24
 34e:	01 f1       	breq	.+64     	; 0x390 <__vector_23+0x150>
		PORTD.OUT |= stop; // all led off
 350:	e0 e6       	ldi	r30, 0x60	; 96
 352:	f4 e0       	ldi	r31, 0x04	; 4
 354:	94 81       	ldd	r25, Z+4	; 0x04
 356:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 35a:	98 2b       	or	r25, r24
 35c:	94 83       	std	Z+4, r25	; 0x04
		int intflags = ADC0.INTFLAGS;
 35e:	a0 e0       	ldi	r26, 0x00	; 0
 360:	b6 e0       	ldi	r27, 0x06	; 6
 362:	1b 96       	adiw	r26, 0x0b	; 11
 364:	9c 91       	ld	r25, X
 366:	1b 97       	sbiw	r26, 0x0b	; 11
		ADC0.INTFLAGS = intflags;
 368:	1b 96       	adiw	r26, 0x0b	; 11
 36a:	9c 93       	st	X, r25
		PORTD.OUTCLR= turning_left; //LED0 is on
 36c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <turning_left>
 370:	96 83       	std	Z+6, r25	; 0x06
		PORTD.OUT |= stop; //all leds off
 372:	94 81       	ldd	r25, Z+4	; 0x04
 374:	89 2b       	or	r24, r25
 376:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR= moving_forward; //LED1 is on
 378:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <moving_forward>
 37c:	86 83       	std	Z+6, r24	; 0x06
		left_turns++;
 37e:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <left_turns>
 382:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <left_turns+0x1>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <left_turns>
 38c:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <left_turns+0x1>
	}
	cli();
 390:	f8 94       	cli
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_12>:


//right sensor after_2ms
ISR(TCB0_INT_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	8f 93       	push	r24
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	period_of_2ms_have_passed = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <period_of_2ms_have_passed>
	TCB0.INTFLAGS |= TCB_CAPT_bm; // Clear interrupt flag
 3be:	e0 e8       	ldi	r30, 0x80	; 128
 3c0:	fa e0       	ldi	r31, 0x0A	; 10
 3c2:	86 81       	ldd	r24, Z+6	; 0x06
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	86 83       	std	Z+6, r24	; 0x06
	
	cli();
 3c8:	f8 94       	cli
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_9>:


//forward sensor after_1ms
ISR(TCA0_CMP0_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	8f 93       	push	r24
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	period_of_1ms_have_passed = 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <period_of_1ms_have_passed>
	TCB1.INTFLAGS |= TCB_CAPT_bm; // Clear interrupt flag
 3f0:	e0 e9       	ldi	r30, 0x90	; 144
 3f2:	fa e0       	ldi	r31, 0x0A	; 10
 3f4:	86 81       	ldd	r24, Z+6	; 0x06
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	86 83       	std	Z+6, r24	; 0x06
	
	cli();
 3fa:	f8 94       	cli
}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	8f 91       	pop	r24
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_29>:

//moving backwards (button)
ISR(PORTF_PORT_vect){
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	PORTD.OUT |= stop; // all LED off
 422:	e0 e6       	ldi	r30, 0x60	; 96
 424:	f4 e0       	ldi	r31, 0x04	; 4
 426:	84 81       	ldd	r24, Z+4	; 0x04
 428:	90 91 00 28 	lds	r25, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 42c:	89 2b       	or	r24, r25
 42e:	84 83       	std	Z+4, r24	; 0x04
	int y = PORTF.INTFLAGS; 
 430:	a0 ea       	ldi	r26, 0xA0	; 160
 432:	b4 e0       	ldi	r27, 0x04	; 4
 434:	19 96       	adiw	r26, 0x09	; 9
 436:	8c 91       	ld	r24, X
 438:	19 97       	sbiw	r26, 0x09	; 9
	PORTF.INTFLAGS=y; //clear the interrupt flag
 43a:	19 96       	adiw	r26, 0x09	; 9
 43c:	8c 93       	st	X, r24
	PORTD.OUTCLR = stop; // all LED on
 43e:	96 83       	std	Z+6, r25	; 0x06
	turn_180 = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <turn_180>
	
	cli();
 446:	f8 94       	cli
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_13>:

//180 turn duration
ISR(TCB1_INT_vect){
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	TCB1.INTFLAGS |= TCB_CAPT_bm; // Clear interrupt flag
 46e:	e0 e9       	ldi	r30, 0x90	; 144
 470:	fa e0       	ldi	r31, 0x0A	; 10
 472:	86 81       	ldd	r24, Z+6	; 0x06
 474:	81 60       	ori	r24, 0x01	; 1
 476:	86 83       	std	Z+6, r24	; 0x06
	turn_180 = 0;
 478:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <turn_180>
	ADC0.CTRLA &= ~(1 << 1); //Disable Free-Running mode
 47c:	e0 e0       	ldi	r30, 0x00	; 0
 47e:	f6 e0       	ldi	r31, 0x06	; 6
 480:	80 81       	ld	r24, Z
 482:	8d 7f       	andi	r24, 0xFD	; 253
 484:	80 83       	st	Z, r24
	ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 486:	80 85       	ldd	r24, Z+8	; 0x08
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	80 87       	std	Z+8, r24	; 0x08
	moving_bakwards = 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <moving_bakwards>
	
	cli();
 492:	f8 94       	cli
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	8f 91       	pop	r24
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
