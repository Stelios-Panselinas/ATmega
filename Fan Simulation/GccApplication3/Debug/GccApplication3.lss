
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00802800  00802800  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000293f  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022a3  00000000  00000000  00002d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00005006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001441  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c6  00000000  00000000  0000696d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00006b33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_12>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a8 30       	cpi	r26, 0x08	; 8
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  b0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <CLOCK_init>:
//void TCB1_init (void);

//Initialize clock
void CLOCK_init (){
	// Enable writing to protected register
	CPU_CCP = CCP_IOREG_gc;
  b8:	88 ed       	ldi	r24, 0xD8	; 216
  ba:	84 bf       	out	0x34, r24	; 52
	// Disable CLK_PER Prescaler
	CLKCTRL.MCLKCTRLB = 0 << CLKCTRL_PEN_bp;
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	11 82       	std	Z+1, r1	; 0x01
	// Enable writing to protected register
	CPU_CCP = CCP_IOREG_gc;
  c2:	84 bf       	out	0x34, r24	; 52
	// Select 32KHz Internal Ultra Low Power Oscillator (OSCULP32K)
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSCULP32K_gc;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
	// Wait for system oscillator changing to finish
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
  c8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
  cc:	80 fd       	sbrc	r24, 0
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <CLOCK_init+0x10>
	{
		;
	}
}
  d0:	08 95       	ret

000000d2 <PORT_init>:

// Initialize ports
void PORT_init (void)
{
	PORTD.DIR = PIN0_bm|PIN1_bm;
  d2:	e0 e6       	ldi	r30, 0x60	; 96
  d4:	f4 e0       	ldi	r31, 0x04	; 4
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm|PIN1_bm;
  da:	84 81       	ldd	r24, Z+4	; 0x04
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	84 83       	std	Z+4, r24	; 0x04
  e0:	08 95       	ret

000000e2 <TCB0_init>:
}


void TCB0_init (bool period_of_1ms) //Παλμός για τις λεπίδες 1ms και 0,5ms
{
	if(period_of_1ms){
  e2:	88 23       	and	r24, r24
  e4:	39 f0       	breq	.+14     	; 0xf4 <TCB0_init+0x12>
		// Load the Compare or Capture register with the timeout value for period of 1 ms
		TCB0.CCMP = TCB0_value_for_1ms;
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	90 e1       	ldi	r25, 0x10	; 16
  ea:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
  ee:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
  f2:	06 c0       	rjmp	.+12     	; 0x100 <__EEPROM_REGION_LENGTH__>
		}else{
		//Load the Compare or Capture register with the timeout value for period of 0.5 ms
		TCB0.CCMP = TCB0_value_for_half_ms;
  f4:	8f e0       	ldi	r24, 0x0F	; 15
  f6:	98 e0       	ldi	r25, 0x08	; 8
  f8:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
  fc:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
	}
	// Enable TCB and set CLK_PER divider to 1 (No Pre scaling)
	TCB0.CTRLA = TCB_ENABLE_bm;
 100:	e0 e8       	ldi	r30, 0x80	; 128
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 83       	st	Z, r25
	// Enable Pin Output and configure TCB  in 8-bit PWM mode
	TCB0.CTRLB |= TCB_CCMPEN_bm | TCB_CNTMODE_PWM8_gc;
 108:	81 81       	ldd	r24, Z+1	; 0x01
 10a:	87 61       	ori	r24, 0x17	; 23
 10c:	81 83       	std	Z+1, r24	; 0x01
	// Enable Capture or Timeout interrupt
	TCB0.INTCTRL = TCB_CAPT_bm;
 10e:	95 83       	std	Z+5, r25	; 0x05
 110:	08 95       	ret

00000112 <TCB1_init>:
}

void TCB1_init (void) //Παλμός για βαση Tb = 2ms και Db = 60%.
{
	// Load the Compare or Capture register with the timeout value
	TCB1.CCMP = TCB1_value;
 112:	e0 e9       	ldi	r30, 0x90	; 144
 114:	fa e0       	ldi	r31, 0x0A	; 10
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	97 e2       	ldi	r25, 0x27	; 39
 11a:	84 87       	std	Z+12, r24	; 0x0c
 11c:	95 87       	std	Z+13, r25	; 0x0d
	// Enable TCB and set CLK_PER divider to 1 (No Pre scaling)
	TCB1.CTRLA = TCB_ENABLE_bm;
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	90 83       	st	Z, r25
	// Enable Pin Output and configure TCB  in 8-bit PWM mode
	TCB1.CTRLB |= TCB_CCMPEN_bm | TCB_CNTMODE_PWM8_gc;
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	87 61       	ori	r24, 0x17	; 23
 126:	81 83       	std	Z+1, r24	; 0x01
	// Enable Capture or Timeout interrupt
	TCB1.INTCTRL = TCB_CAPT_bm;
 128:	95 83       	std	Z+5, r25	; 0x05
 12a:	08 95       	ret

0000012c <main>:
}

int main(void)
{
	PORT_init();
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <PORT_init>
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 130:	e0 ea       	ldi	r30, 0xA0	; 160
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	85 89       	ldd	r24, Z+21	; 0x15
 136:	89 60       	ori	r24, 0x09	; 9
 138:	85 8b       	std	Z+21, r24	; 0x15
	sei();
 13a:	78 94       	sei
	while (1)
	{
		sei();
 13c:	78 94       	sei
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x10>

00000140 <__vector_29>:
	}
	cli();
}


ISR(PORTF_PORT_vect){//Interrupt for starting/turning off the fan.
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	int y = PORTF.INTFLAGS;
 162:	e0 ea       	ldi	r30, 0xA0	; 160
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS=y;
 168:	81 87       	std	Z+9, r24	; 0x09
	enable_but_press_times ++;
 16a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 16e:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 178:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	
	if (enable_but_press_times == 1 && fan_ON == 0){
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	91 05       	cpc	r25, r1
 180:	a1 f4       	brne	.+40     	; 0x1aa <__vector_29+0x6a>
 182:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <fan_ON>
 186:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <fan_ON+0x1>
 18a:	23 2b       	or	r18, r19
 18c:	71 f4       	brne	.+28     	; 0x1aa <__vector_29+0x6a>
		CLOCK_init();//Initialize clock
 18e:	0e 94 5c 00 	call	0xb8	; 0xb8 <CLOCK_init>
		TCB0_init(1);//Ενεργοποίηση λεπίδων με περίοδο 1ms και duty cycle 50%
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 71 00 	call	0xe2	; 0xe2 <TCB0_init>
		TCB1_init();//Ενεργοποίηση βάσης με περίοδο 2ms και duty cycle 60%
 198:	0e 94 89 00 	call	0x112	; 0x112 <TCB1_init>
		fan_ON = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <fan_ON>
 1a4:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <fan_ON+0x1>
 1a8:	22 c0       	rjmp	.+68     	; 0x1ee <__vector_29+0xae>
	}else if(enable_but_press_times == 2 && fan_ON == 1){
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	91 05       	cpc	r25, r1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <__vector_29+0x86>
 1b0:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <fan_ON>
 1b4:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <fan_ON+0x1>
 1b8:	21 30       	cpi	r18, 0x01	; 1
 1ba:	31 05       	cpc	r19, r1
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <__vector_29+0x86>
		TCB0_init(0);//Ενεργοποίηση λεπίδων με περίοδο 0.5ms και duty cycle 50%
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 71 00 	call	0xe2	; 0xe2 <TCB0_init>
 1c4:	14 c0       	rjmp	.+40     	; 0x1ee <__vector_29+0xae>
	}else if(enable_but_press_times == 3){
 1c6:	03 97       	sbiw	r24, 0x03	; 3
 1c8:	91 f4       	brne	.+36     	; 0x1ee <__vector_29+0xae>
		TCB1.CTRLA &= ~TCB_ENABLE_bm;
 1ca:	e0 e9       	ldi	r30, 0x90	; 144
 1cc:	fa e0       	ldi	r31, 0x0A	; 10
 1ce:	80 81       	ld	r24, Z
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	80 83       	st	Z, r24
		TCB0.CTRLA &= ~TCB_ENABLE_bm;
 1d4:	e0 e8       	ldi	r30, 0x80	; 128
 1d6:	fa e0       	ldi	r31, 0x0A	; 10
 1d8:	80 81       	ld	r24, Z
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	80 83       	st	Z, r24
		enable_but_press_times = 0;
 1de:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 1e2:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
		fan_ON=0;
 1e6:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <fan_ON>
 1ea:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <fan_ON+0x1>
	}
	cli();
 1ee:	f8 94       	cli
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_12>:
//Για τους 2 TCB να χρησιμοποιήσουμε μια ISR που ενεργοποιείται από τον timer(TCB0) με την μικρότερη περίοδο.
//Μέσα σε αυτή την ISR κοιτώντας το TCB1.INTFLAGS καταλαβαίνουμε αν έχει προκύψει interrupt και από τον TCB1 και το αντιμετωπίζουμε ανάλογα.


ISR(TCB0_INT_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	// Clear the interrupt flag
	TCB0.INTFLAGS = TCB_CAPT_bm;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	
	if(edgecounterTCB0 == 0){
 232:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <edgecounterTCB0>
 236:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <edgecounterTCB0+0x1>
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	21 f4       	brne	.+8      	; 0x246 <__vector_12+0x34>
		// Open the LED 0
		PORTD.OUTCLR = PIN0_bm;
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
 244:	05 c0       	rjmp	.+10     	; 0x250 <__vector_12+0x3e>
	}
	else{
		// Close LED 0
		PORTD.OUT |= PIN0_bm;
 246:	e0 e6       	ldi	r30, 0x60	; 96
 248:	f4 e0       	ldi	r31, 0x04	; 4
 24a:	24 81       	ldd	r18, Z+4	; 0x04
 24c:	21 60       	ori	r18, 0x01	; 1
 24e:	24 83       	std	Z+4, r18	; 0x04
	}

	// TCB1 on a rising edge
	if(TCB1.INTFLAGS == 1)
 250:	20 91 96 0a 	lds	r18, 0x0A96	; 0x800a96 <__TEXT_REGION_LENGTH__+0x7f4a96>
 254:	21 30       	cpi	r18, 0x01	; 1
 256:	79 f5       	brne	.+94     	; 0x2b6 <__vector_12+0xa4>
	{
		
		// Clear the interrupt flag
		TCB1.INTFLAGS = TCB_CAPT_bm;
 258:	20 93 96 0a 	sts	0x0A96, r18	; 0x800a96 <__TEXT_REGION_LENGTH__+0x7f4a96>

		if(edgecounterTCB1 % 2 == 0)
 25c:	20 91 06 28 	lds	r18, 0x2806	; 0x802806 <edgecounterTCB1>
 260:	30 91 07 28 	lds	r19, 0x2807	; 0x802807 <edgecounterTCB1+0x1>
 264:	20 fd       	sbrc	r18, 0
 266:	04 c0       	rjmp	.+8      	; 0x270 <__vector_12+0x5e>
		{
			// Open the LED 1
			PORTD.OUTCLR = PIN1_bm;
 268:	42 e0       	ldi	r20, 0x02	; 2
 26a:	40 93 66 04 	sts	0x0466, r20	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
 26e:	13 c0       	rjmp	.+38     	; 0x296 <__vector_12+0x84>
		}

		else if(edgecounterTCB1 % 2 == 1)
 270:	a9 01       	movw	r20, r18
 272:	41 70       	andi	r20, 0x01	; 1
 274:	50 78       	andi	r21, 0x80	; 128
 276:	55 23       	and	r21, r21
 278:	34 f4       	brge	.+12     	; 0x286 <__vector_12+0x74>
 27a:	41 50       	subi	r20, 0x01	; 1
 27c:	51 09       	sbc	r21, r1
 27e:	4e 6f       	ori	r20, 0xFE	; 254
 280:	5f 6f       	ori	r21, 0xFF	; 255
 282:	4f 5f       	subi	r20, 0xFF	; 255
 284:	5f 4f       	sbci	r21, 0xFF	; 255
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	51 05       	cpc	r21, r1
 28a:	29 f4       	brne	.+10     	; 0x296 <__vector_12+0x84>
		{
			// Close LED 1
			PORTD.OUT |= PIN1_bm;
 28c:	e0 e6       	ldi	r30, 0x60	; 96
 28e:	f4 e0       	ldi	r31, 0x04	; 4
 290:	44 81       	ldd	r20, Z+4	; 0x04
 292:	42 60       	ori	r20, 0x02	; 2
 294:	44 83       	std	Z+4, r20	; 0x04

		}
		edgecounterTCB1 = (edgecounterTCB1 + 1) % 2;
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	21 70       	andi	r18, 0x01	; 1
 29c:	30 78       	andi	r19, 0x80	; 128
 29e:	33 23       	and	r19, r19
 2a0:	34 f4       	brge	.+12     	; 0x2ae <__vector_12+0x9c>
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	31 09       	sbc	r19, r1
 2a6:	2e 6f       	ori	r18, 0xFE	; 254
 2a8:	3f 6f       	ori	r19, 0xFF	; 255
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	20 93 06 28 	sts	0x2806, r18	; 0x802806 <edgecounterTCB1>
 2b2:	30 93 07 28 	sts	0x2807, r19	; 0x802807 <edgecounterTCB1+0x1>
	}

	edgecounterTCB0 = (edgecounterTCB0 + 1) % 2;
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	81 70       	andi	r24, 0x01	; 1
 2ba:	90 78       	andi	r25, 0x80	; 128
 2bc:	99 23       	and	r25, r25
 2be:	24 f4       	brge	.+8      	; 0x2c8 <__vector_12+0xb6>
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	8e 6f       	ori	r24, 0xFE	; 254
 2c4:	9f 6f       	ori	r25, 0xFF	; 255
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <edgecounterTCB0>
 2cc:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <edgecounterTCB0+0x1>
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
